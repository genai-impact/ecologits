[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ecologits"
version = "0.3.2"
description = "EcoLogits tracks and estimates the energy consumption and environmental impacts of using generative AI models through APIs."
authors = [
    "GenAI Impact",
    "Data For Good"
]
maintainers = [
    "GenAI Impact"
]
license = "MPL-2.0"
readme = "README.md"
homepage = "https://ecologits.ai"
repository = "https://github.com/genai-impact/ecologits"
documentation = "https://ecologits.ai"
classifiers = [
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Topic :: Internet",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux"
]

[tool.poetry.dependencies]
python = ">=3.9,<4"
wrapt = "^1.14.1"
pydantic = ">=2,<3"
packaging = ">=23.2,<25.0"
openai = { version = "^1.12.0", optional = true }
mistralai = { version = "^0.1.3", optional = true }
anthropic = { version = "^0.29.0", optional = true }
cohere = {version = "^5.2.5", optional = true}
huggingface-hub = { version = "^0.22.2",  optional = true }
tiktoken = { version = "^0.7.0", optional = true }
aiohttp = { version = "^3.9.3", optional = true }
minijinja = { version = "^1.0.16", optional = true }
google-generativeai = { version = "^0.7.0", optional = true }
litellm = {version="^1.41.23", optional = true}

[tool.poetry.extras]
openai = ["openai"]
litellm = ["litellm"]
mistralai = ["mistralai"]
anthropic = ["anthropic"]
cohere = ["cohere"]
huggingface-hub = ["huggingface-hub", "tiktoken", "aiohttp", "minijinja"]
google-generativeai = ["google-generativeai"]


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
pytest = "^7.2.0"
# ruff = "^0.0.254"
pytest-recording = "^0.13.1"
pytest-dotenv = "^0.5.2"
pytest-asyncio = "^0.23.6"
numpy = "^2.0.0"
toml = "^0.10.2"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = { version = "^9.5.12", extras = ["imaging"] }
mkdocstrings = { version = "^0.25.0", extras = ["python"] }
mkdocs-gen-files = "^0.5.0"
mkdocs-autorefs = "^1.0.1"
mkdocs-literate-nav = "^0.6.1"
mike = "^2.1.2"


[pytest]
env_files = [".env"]


[tool.ruff]
select = [
    "A",
    "ANN",
    "ARG",
    "B",
    "C",
    "COM",
    "C90",
    "E",
    "ERA",
    "F",
    "I",
    "N",
    "PGH",
    "PL",
    "PLE",
    "PLR",
    "PLW",
    "PT",
    "PTH",
    "Q",
    "RET",
    "RUF",
    "SLF",
    "SIM",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT"
]

ignore = [
    "A003",
    "ANN101",
    "ANN102",
    "ANN401",
    "N805",
    "N818",
    "PLR0913",
    "RET504",
    "RET505",
    "COM812",
    "PTH",
    "TRY003"
]

fixable = [
    "A",
    "ANN",
    "ARG",
    "B",
    "C",
    "COM",
    "C90",
    "E",
    "ERA",
    "F",
    "I",
    "PGH",
    "PL",
    "PLE",
    "PLR",
    "PLW",
    "PT",
    "PTH",
    "Q",
    "RET",
    "RUF",
    "SLF",
    "SIM",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT"
]
unfixable = []

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
    "pages",
    "tests"
]

line-length = 120

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"
